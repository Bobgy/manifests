apiVersion: v1
kind: ConfigMap
metadata:
  name: profile-controller
data:
    sync.py: |
        from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
        import json

        class Controller(BaseHTTPRequestHandler):
            def sync(self, parent, children):
                # Compute status based on observed state.
                desired_status = {
                    "kubeflow-pipelines-config-ready": \
                      len(children["Secret.v1"]) > 0 and \
                      len(children["ConfigMap.v1"]) > 0 and \
                      len(children["Deployment.apps/v1"]) > 0 and \
                      len(children["Service.v1"]) > 0 and \
                      "True" or "False"
                }

                # Generate the desired child object(s).
                # Profile's name is the namespace generated by it.
                namespace = parent.get("metadata", {}).get("name")
                desired_resources = [
                {
                    "apiVersion": "v1",
                    "kind": "Secret",
                    "metadata": {
                        "name": "mlpipeline-minio-artifact",
                        "namespace": namespace,
                    },
                    "data": {
                        "accesskey": "bWluaW8=", # base64 for minio
                        "secretkey": "bWluaW8xMjM=", # base64 for minio123
                    },
                },
                {
                    "apiVersion": "v1",
                    "kind": "ConfigMap",
                    "metadata": {
                        "name": "metadata-grpc-configmap",
                        "namespace": namespace,
                    },
                    "data": {
                        "METADATA_GRPC_SERVICE_HOST": "metadata-grpc-service.kubeflow",
                        "METADATA_GRPC_SERVICE_PORT": "8080",
                    },
                },
                {
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "labels": {"app": "ml-pipeline-visualizationserver"},
                        "name": "ml-pipeline-visualizationserver",
                        "namespace": namespace,
                    },
                    "spec": {
                        "selector": {
                            "matchLabels": {"app": "ml-pipeline-visualizationserver"},
                        },
                        "template": {
                            "metadata": {
                                "labels": {"app": "ml-pipeline-visualizationserver"},
                                "annotations": {"sidecar.istio.io/inject": "false"},
                            },
                            "spec": {
                                "containers": [{
                                    "image": "gcr.io/ml-pipeline/visualization-server:0.4.0",
                                    "imagePullPolicy": "IfNotPresent",
                                    "name": "ml-pipeline-visualizationserver",
                                    "ports": [{"containerPort": 8888}],
                                }],
                                "serviceAccountName": "default-editor",
                            },
                        },
                    },
                },
                {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "name": "ml-pipeline-visualizationserver",
                        "namespace": namespace,
                    },
                    "spec": {
                        "ports": [{
                            "name": "http",
                            "port": 8888,
                            "protocol": "TCP",
                            "targetPort": 8888,
                        }],
                        "selector": {
                            "app": "ml-pipeline-visualizationserver",
                        },
                    },
                },
                # Artifact fetcher related resources below.
                {
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "labels": { "app": "ml-pipeline-ui-artifact" },
                        "name": "ml-pipeline-ui-artifact",
                        "namespace": namespace,
                    },
                    "spec": {
                        "selector": {
                            "matchLabels": { "app": "ml-pipeline-ui-artifact" }
                        },
                        "template": {
                            "metadata": {
                                "labels": { "app": "ml-pipeline-ui-artifact" },
                                "annotations": { "sidecar.istio.io/inject": "false" }
                            },
                            "spec": {
                                "containers": [
                                    {
                                        "name": "ml-pipeline-ui-artifact",
                                        "image": "gcr.io/gongyuan-pipeline-test/dev/frontend@sha256:488c62e1446208d583dc02106e5743845f06be87173350521fae3b03f0a22c1e",
                                        "imagePullPolicy": "IfNotPresent",
                                        "ports": [
                                            { "containerPort": 3000 }
                                        ]
                                    }
                                ],
                                "serviceAccountName": "default-editor"
                            }
                        }
                    }
                },
                {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "name": "ml-pipeline-ui-artifact",
                        "namespace": namespace,
                        "labels": { "app": "ml-pipeline-ui-artifact" }
                    },
                    "spec": {
                        "ports": [
                            { "port": 80, "targetPort": 3000 }
                        ],
                        "selector": { "app": "ml-pipeline-ui-artifact" }
                    }
                },
                ]
                print('Received request', parent, desired_resources)

                return {"status": desired_status, "children": desired_resources}

            def do_POST(self):
                # Serve the sync() function as a JSON webhook.
                observed = json.loads(self.rfile.read(int(self.headers.getheader("content-length"))))
                desired = self.sync(observed["parent"], observed["children"])

                self.send_response(200)
                self.send_header("Content-type", "application/json")
                self.end_headers()
                self.wfile.write(json.dumps(desired))

        HTTPServer(("", 80), Controller).serve_forever()
