apiVersion: v1
kind: ConfigMap
metadata:
  name: profile-controller
data:
    sync.py: |
        from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
        import json

        class Controller(BaseHTTPRequestHandler):
            def sync(self, parent, children):
                # Compute status based on observed state.
                desired_status = {
                    "kubeflow-pipelines-config-ready": len(children["Secret.v1"]) > 0 and len(children["ConfigMap.v1"]) > 0 and "True" or "False"
                }

                # Generate the desired child object(s).
                # Profile's name is the namespace generated by it.
                namespace = parent.get("metadata", {}).get("name")
                desired_resources = [
                {
                    "apiVersion": "v1",
                    "kind": "Secret",
                    "metadata": {
                    "name": "mlpipeline-minio-artifact",
                    "namespace": namespace
                    },
                    "data": {
                        "accesskey": "bWluaW8=", # base64 for minio
                        "secretkey": "bWluaW8xMjM=" # base64 for minio123
                    }
                },
                {
                    "apiVersion": "v1",
                    "kind": "ConfigMap",
                    "metadata": {
                    "name": "metadata-grpc-configmap",
                    "namespace": namespace
                    },
                    "data": {
                    "METADATA_GRPC_SERVICE_HOST": "metadata-grpc-service.kubeflow",
                    "METADATA_GRPC_SERVICE_PORT": "8080"
                    }
                }
                ]
                print('Received request', parent, desired_resources)

                return {"status": desired_status, "children": desired_resources}

            def do_POST(self):
                # Serve the sync() function as a JSON webhook.
                observed = json.loads(self.rfile.read(int(self.headers.getheader("content-length"))))
                desired = self.sync(observed["parent"], observed["children"])

                self.send_response(200)
                self.send_header("Content-type", "application/json")
                self.end_headers()
                self.wfile.write(json.dumps(desired))

        HTTPServer(("", 80), Controller).serve_forever()
